const resolves=new Map,swMessageError=(e,s)=>({$msgId$:e.$msgId$,$error$:s}),httpRequestFromWebWorker=e=>new Promise(async s=>{var t;let r=await e.clone().json(),o=await (t=r,new Promise(async e=>{let s=await self.clients.matchAll(),r=[...s].sort((e,s)=>e.url>s.url?-1:e.url<s.url?1:0)[0];if(r){let o=[e,setTimeout(()=>{resolves.delete(t.$msgId$),e(swMessageError(t,"Timeout"))},12e4)];resolves.set(t.$msgId$,o),r.postMessage(t)}else e(swMessageError(t,"NoParty"))}));s(response(JSON.stringify(o),"application/json"))}),response=(e,s)=>new Response(e,{headers:{"content-type":s||"text/html","Cache-Control":"no-store"}});self.oninstall=()=>self.skipWaiting(),self.onactivate=()=>self.clients.claim(),self.onmessage=e=>{let s=e.data,t=resolves.get(s.$msgId$);t&&(resolves.delete(s.$msgId$),clearTimeout(t[1]),t[0](s))},self.onfetch=e=>{let s=e.request,t=new URL(s.url),r=t.pathname;r.endsWith("sw.html")?e.respondWith(response('<!DOCTYPE html><html><head><meta charset="utf-8"><script src="./partytown-sandbox-sw.js?v=0.7.0"></script></head></html>')):r.endsWith("proxytown")&&e.respondWith(httpRequestFromWebWorker(s))};